// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sonare.Data;

#nullable disable

namespace Sonare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250614045728_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sonare.Models.Clip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsFinalMix")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A smooth synthwave track",
                            IsFinalMix = true,
                            MediaUrl = "/media/dreamy.mp3",
                            Title = "Dreamy Synths",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Punchy drum loop for hip-hop",
                            IsFinalMix = false,
                            MediaUrl = "/media/hiphop-drums.mp3",
                            Title = "Hip-Hop Drums",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Layered ambient textures",
                            IsFinalMix = true,
                            MediaUrl = "/media/ambient.mp3",
                            Title = "Ambient Layers",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Sonare.Models.ClipCollaborator", b =>
                {
                    b.Property<int>("ClipId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClipId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClipCollaborators");

                    b.HasData(
                        new
                        {
                            ClipId = 1,
                            UserId = 3,
                            CreatedAt = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Polished the final mix",
                            Role = "Mixer"
                        },
                        new
                        {
                            ClipId = 2,
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Added percussive elements",
                            Role = "Drummer"
                        },
                        new
                        {
                            ClipId = 3,
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Helped layer ambient elements",
                            Role = "Producer"
                        });
                });

            modelBuilder.Entity("Sonare.Models.Collaboration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OriginalClipId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseClipId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalClipId");

                    b.HasIndex("ResponseClipId");

                    b.ToTable("Collaborations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalClipId = 1,
                            ResponseClipId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalClipId = 2,
                            ResponseClipId = 1
                        });
                });

            modelBuilder.Entity("Sonare.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClipId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClipId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Love the vibe on this!",
                            ClipId = 1,
                            CreatedAt = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Body = "These drums hit hard. 🔥",
                            ClipId = 2,
                            CreatedAt = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Body = "Very cinematic feel, nice job!",
                            ClipId = 3,
                            CreatedAt = new DateTime(2024, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Sonare.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melody@example.com",
                            PasswordHash = "hash1",
                            Username = "melodyMaker"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beats@example.com",
                            PasswordHash = "hash2",
                            Username = "beatSmith"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "synth@example.com",
                            PasswordHash = "hash3",
                            Username = "synthQueen"
                        });
                });

            modelBuilder.Entity("Sonare.Models.Clip", b =>
                {
                    b.HasOne("Sonare.Models.User", "User")
                        .WithMany("Clips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonare.Models.ClipCollaborator", b =>
                {
                    b.HasOne("Sonare.Models.Clip", "Clip")
                        .WithMany("ClipCollaborators")
                        .HasForeignKey("ClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sonare.Models.User", "User")
                        .WithMany("ClipCollaborations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonare.Models.Collaboration", b =>
                {
                    b.HasOne("Sonare.Models.Clip", "OriginalClip")
                        .WithMany("OriginalCollaborations")
                        .HasForeignKey("OriginalClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sonare.Models.Clip", "ResponseClip")
                        .WithMany("ResponseCollaborations")
                        .HasForeignKey("ResponseClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalClip");

                    b.Navigation("ResponseClip");
                });

            modelBuilder.Entity("Sonare.Models.Comment", b =>
                {
                    b.HasOne("Sonare.Models.Clip", "Clip")
                        .WithMany("Comments")
                        .HasForeignKey("ClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sonare.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonare.Models.Clip", b =>
                {
                    b.Navigation("ClipCollaborators");

                    b.Navigation("Comments");

                    b.Navigation("OriginalCollaborations");

                    b.Navigation("ResponseCollaborations");
                });

            modelBuilder.Entity("Sonare.Models.User", b =>
                {
                    b.Navigation("ClipCollaborations");

                    b.Navigation("Clips");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
